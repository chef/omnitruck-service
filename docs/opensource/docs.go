// Package opensource GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package opensource

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/architectures": {
            "get": {
                "description": "Returns a valid list of valid platform keys along with friendly names.\nAny of these architecture keys can be used in the p query string value in various endpoints below.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/opensource.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/platforms": {
            "get": {
                "description": "Returns a valid list of valid platform keys along with full friendly names.\nAny of these platform keys can be used in the p query string value in various endpoints below.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/omnitruck_client.PlatformList"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/opensource.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/products": {
            "get": {
                "description": "Returns a valid list of valid product keys.\nAny of these product keys can be used in the \u003cPRODUCT\u003e value of other endpoints. Please note many of these products are used for internal tools only and many have been EOLâ€™d.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/opensource.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/{channel}/{product}/download": {
            "get": {
                "description": "Get details for a particular package.\nThe ` + "`" + `ACCEPT` + "`" + ` HTTP header with a value of ` + "`" + `application/json` + "`" + ` must be provided in the request for a JSON response to be returned",
                "parameters": [
                    {
                        "enum": [
                            "current",
                            "stable"
                        ],
                        "type": "string",
                        "description": "Channel",
                        "name": "channel",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "chef",
                        "description": "Product",
                        "name": "product",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "ubuntu",
                        "description": "Platform, valid values are returned from the ` + "`" + `/platforms` + "`" + ` endpoint.",
                        "name": "p",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "20.04",
                        "description": "Platform Version, possible values depend on the platform. For example, Ubuntu: 16.04, or 18.04 or for macOS: 10.14 or 10.15.",
                        "name": "pv",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "x86_64",
                        "description": "Machine architecture, valid values are returned by the ` + "`" + `/architectures` + "`" + ` endpoint.",
                        "name": "m",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "latest",
                        "description": "Version of the product to be installed. A version always takes the form ` + "`" + `x.y.z` + "`" + `",
                        "name": "v",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "License ID",
                        "name": "license_id",
                        "in": "header"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "EOL Products",
                        "name": "eol",
                        "in": "query"
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Found"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/opensource.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/{channel}/{product}/metadata": {
            "get": {
                "description": "Get details for a particular package.\nThe ` + "`" + `ACCEPT` + "`" + ` HTTP header with a value of ` + "`" + `application/json` + "`" + ` must be provided in the request for a JSON response to be returned",
                "parameters": [
                    {
                        "enum": [
                            "current",
                            "stable"
                        ],
                        "type": "string",
                        "description": "Channel",
                        "name": "channel",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "chef",
                        "description": "Product",
                        "name": "product",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "ubuntu",
                        "description": "Platform, valid values are returned from the ` + "`" + `/platforms` + "`" + ` endpoint.",
                        "name": "p",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "20.04",
                        "description": "Platform Version, possible values depend on the platform. For example, Ubuntu: 16.04, or 18.04 or for macOS: 10.14 or 10.15.",
                        "name": "pv",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "x86_64",
                        "description": "Machine architecture, valid values are returned by the ` + "`" + `/architectures` + "`" + ` endpoint.",
                        "name": "m",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "latest",
                        "description": "Version of the product to be installed. A version always takes the form ` + "`" + `x.y.z` + "`" + `",
                        "name": "v",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "License ID",
                        "name": "license_id",
                        "in": "header"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "EOL Products",
                        "name": "eol",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/omnitruck_client.PackageMetadata"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/opensource.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/{channel}/{product}/packages": {
            "get": {
                "description": "Get the full list of all packages for a particular channel and product combination.\nBy default all packages for the latest version are returned. If the v query string parameter is included the packages for the specified version are returned.",
                "parameters": [
                    {
                        "enum": [
                            "current",
                            "stable"
                        ],
                        "type": "string",
                        "description": "Channel",
                        "name": "channel",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "chef",
                        "description": "Product",
                        "name": "product",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Version",
                        "name": "v",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "License ID",
                        "name": "license_id",
                        "in": "header"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "EOL Products",
                        "name": "eol",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/omnitruck_client.PackageList"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/opensource.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/{channel}/{product}/versions/all": {
            "get": {
                "description": "Get a list of all available version numbers for a particular channel and product combination",
                "parameters": [
                    {
                        "enum": [
                            "current",
                            "stable"
                        ],
                        "type": "string",
                        "description": "Channel",
                        "name": "channel",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Product",
                        "name": "product",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "License ID",
                        "name": "license_id",
                        "in": "header"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "EOL Products",
                        "name": "eol",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/opensource.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/{channel}/{product}/versions/latest": {
            "get": {
                "description": "Get the latest version number for a particular channel and product combination.",
                "parameters": [
                    {
                        "enum": [
                            "current",
                            "stable"
                        ],
                        "type": "string",
                        "description": "Channel",
                        "name": "channel",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Product",
                        "name": "product",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "License ID",
                        "name": "license_id",
                        "in": "header"
                    },
                    {
                        "type": "boolean",
                        "description": "EOL Products",
                        "name": "eol",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/opensource.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "omnitruck_client.ArchList": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/definitions/omnitruck_client.PackageMetadata"
            }
        },
        "omnitruck_client.PackageList": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/definitions/omnitruck_client.PlatformVersionList"
            }
        },
        "omnitruck_client.PackageMetadata": {
            "type": "object",
            "properties": {
                "sha1": {
                    "type": "string"
                },
                "sha256": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "version": {
                    "type": "string"
                }
            }
        },
        "omnitruck_client.PlatformList": {
            "type": "object",
            "additionalProperties": {
                "type": "string"
            }
        },
        "omnitruck_client.PlatformVersionList": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#/definitions/omnitruck_client.ArchList"
            }
        },
        "opensource.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "status_text": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "localhost:3000",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "Licensed Omnitruck API for opensource products",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
